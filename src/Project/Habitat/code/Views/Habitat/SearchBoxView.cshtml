@using Coveo.UI.Extensions
@using Sitecore.Mvc
@model Coveo.UI.Mvc.Models.SearchboxModel

@* When customizing this component, ensure to use "Coveo.$" instead of the regular jQuery "$" to
    avoid any conflicts with Sitecore's Page Editor/Experience Editor.  *@

@Html.Coveo().RenderErrorSummary(Model.ValidateModel())
@if (Model.IsConfigured) {
    <script type="text/javascript" src="/Coveo/js/cultures/@(Model.CultureName).js"></script>
    <script type="text/javascript">
        function isOnSearchPage() {
            return false;
        };

        Coveo.$(function () {
            var searchbox = Coveo.$('#@Model.SearchboxId');
            if (!isOnSearchPage()) {
                if (typeof (CoveoForSitecore) !== 'undefined') {
                    var searchOptionsForSearchbox =  @(Html.Raw(Model.GetJavaScriptInitializationOptions()));
                    CoveoForSitecore.componentsOptions = Coveo.$.extend({}, CoveoForSitecore.componentsOptions, searchOptionsForSearchbox);
                    searchbox.coveoForSitecore('initSearchbox',
                                               CoveoForSitecore.componentsOptions);
                } else {
                    searchbox.coveo('initSearchbox',
                                    '@Model.GetSearchPageUrl()');
                }
                searchbox.find(".CoveoSearchbox input").attr("placeholder", '@Model.SearchboxPlaceholderText');
            } else {
                if (!CoveoForSitecore.externalComponents) {
                    CoveoForSitecore.externalComponents = [];
                }
                CoveoForSitecore.externalComponents.push(searchbox[0]);
            }
        });
    </script>

    <div class="activate-coveo" title="Activate Coveo Searchbox" onclick="coveoSearchboxSwitcher.toggleCoveoSearchbox()" style="display:none"></div>
    <div class="navbar-coveo">
        <div id="@Model.SearchboxId"  style="display:none">
            @if (Model.AnalyticsEnabled) {
                <div class="CoveoAnalytics"
                    data-anonymous="@Model.IsUserAnonymous"
                    data-endpoint="@Model.GetAnalyticsEndpoint()"
                    data-search-hub="@Model.GetAnalyticsCurrentPageName()"
                    data-send-to-cloud="@Model.CoveoAnalyticsEnabled">
                </div>
            }
            <div class="CoveoSearchbox"
                data-auto-focus="@Model.AutoFocus"
                data-enable-lowercase-operators="@Model.EnableLowercaseOperators"
                data-enable-partial-match="@Model.EnablePartialMatch"
                data-partial-match-keywords="@Model.PartialMatchKeywords"
                data-partial-match-threshold="@Model.PartialMatchThreshold"
                data-enable-question-marks="@Model.EnableQuestionMarks"
                data-enable-wildcards="@Model.EnableWildcards"
                data-enable-omnibox="true"
                data-omnibox-timeout="@Model.OmniboxTimeout"
                data-enable-field-addon="@Model.OmniboxEnableFieldAddon"
                data-enable-simple-field-addon="@Model.OmniboxEnableSimpleFieldAddon"
                data-enable-top-query-addon="@Model.OmniboxEnableTopQueryAddon"
                data-enable-reveal-query-suggest-addon="@Model.OmniboxEnableRevealQuerySuggestAddon"
                data-enable-query-extension-addon="@Model.OmniboxEnableQueryExtensionAddon"
                @if (Model.IsSearchAsYouTypeEnabled) {
                    @:data-enable-search-as-you-type="true"
                    @:data-search-as-you-type-delay="@Model.SearchboxSuggestionsDelay"
                }>
                <span class="CoveoFieldSuggestions" data-header-title="title" data-field='@Model.ToCoveoFieldName("displayname")'></span>
            </div>

            @Html.Sitecore().Placeholder("coveo-omnibox-suggestions-providers-mvc")
        </div>
    </div>

    <script>
    class CoveoSearchboxSwitcher{
        constructor() {
            this.coveoSearchbox = document.getElementById('@Model.SearchboxId');
            this.habitatSearchbox = document.getElementsByClassName("navbar-activity-search")[0];
            this.activateCoveoSwitch = document.getElementsByClassName("activate-coveo")[0];
            this.coveoSwitchCookieName = "coveoSearchbox";
            this.constants = {
                "on": "on",
                "off": "off",
                "none": "none",
                "empty": "",
                "cookieName": "coveoSearchbox",
                "showCoveoSearchbox": "Show Coveo Searchbox",
                "hideCoveoSearchbox": "Hide Coveo Searchbox",
            };
        };

        setCookie(cookieName, cookieValue, expirationDateInDays) {
            var expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() + (expirationDateInDays*24*60*60*1000));
            var expires = "expires="+ expirationDate.toUTCString();
            document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
        };

        getCookie(cookieName) {
            var name = cookieName + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                };
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                };
            };
            return this.constants.empty;
        };

        switchCoveoOff() {
            this.coveoSearchbox.style.display = this.constants.none;
            this.habitatSearchbox.style.display = this.constants.empty;
            this.activateCoveoSwitch.classList.remove(this.constants.on);
            this.activateCoveoSwitch.style.display = this.constants.empty;
            this.activateCoveoSwitch.title = this.constants.showCoveoSearchbox;
            this.setCookie(this.constants.cookieName, this.constants.off, 30);
        };

        switchCoveoOn() {
            this.coveoSearchbox.style.display = "block";
            this.habitatSearchbox.style.display = this.constants.none;
            this.activateCoveoSwitch.style.display = this.constants.empty;
            this.activateCoveoSwitch.classList.add(this.constants.on);
            this.activateCoveoSwitch.title = this.constants.hideCoveoSearchbox;
            this.setCookie(this.constants.cookieName, this.constants.on, 30);
        };

        checkCoveoSwitchCookie() {
            this.coveoSearchboxCookie = this.getCookie(this.coveoSwitchCookieName);

            if (this.coveoSearchboxCookie == this.constants.off){
                this.switchCoveoOff();
            } else {
                this.switchCoveoOn();
            };
        };

        toggleCoveoSearchbox() {
            this.coveoSearchboxCookie = this.getCookie(this.coveoSwitchCookieName);

            if (this.coveoSearchboxCookie == this.constants.off || this.coveoSearchboxCookie == this.constants.empty){
                this.switchCoveoOn();
            } else {
                this.switchCoveoOff();
            };
        };
    };

    coveoSearchboxSwitcher = new CoveoSearchboxSwitcher();
    coveoSearchboxSwitcher.checkCoveoSwitchCookie();
    </script>
}